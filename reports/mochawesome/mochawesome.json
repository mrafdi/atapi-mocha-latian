{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-10T07:29:33.914Z",
    "end": "2020-03-10T07:29:35.977Z",
    "duration": 2063,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e2ea6d43-85f0-4388-8bec-4d814e320b1a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "cbaa51da-6320-414a-b749-20bcc835b7c4",
        "title": "OMDB Movie List",
        "fullFile": "/home/user/atapi-latihan/api/test/movieList.js",
        "file": "/api/test/movieList.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 95,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "820eae9b-6efb-4182-83fc-4ebdac1a21e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 47,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "4b7731a7-760e-409b-8ba4-a9c4adeee3d6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 565,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "7a32245d-4423-4395-95e9-3ed7d5c1ac62",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "820eae9b-6efb-4182-83fc-4ebdac1a21e7",
          "4b7731a7-760e-409b-8ba4-a9c4adeee3d6",
          "7a32245d-4423-4395-95e9-3ed7d5c1ac62"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 707,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "342f1f26-673a-4c02-ac2c-5ccf14d326e1",
        "title": "OMDB Movie List",
        "fullFile": "/home/user/atapi-latihan/api/test/movieListJson.js",
        "file": "/api/test/movieListJson.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 148,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);\nassert(response.body).to.be.jsonSchema(data.jsonMovieList);",
            "err": {},
            "isRoot": false,
            "uuid": "b4d0b29e-30b6-4fe1-b18f-9c0c8e2d4042",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 1052,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');\nassert(response.body).to.be.jsonSchema(data.jsonMovieNegative);",
            "err": {},
            "isRoot": false,
            "uuid": "06a100b9-177f-4923-8d53-6e85cffe865e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');\nassert(response.body).to.be.jsonSchema(data.jsonMovieNegative);",
            "err": {},
            "isRoot": false,
            "uuid": "73945a21-d4e2-415c-a14e-c94249142eb8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b4d0b29e-30b6-4fe1-b18f-9c0c8e2d4042",
          "06a100b9-177f-4923-8d53-6e85cffe865e",
          "73945a21-d4e2-415c-a14e-c94249142eb8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1327,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2020
}